{"ast":null,"code":"import { HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n    }\n    subscribeFunction(res) {\n      return null;\n    }\n    errorFunction(res) {\n      return res;\n    }\n    subscribe(r) {\n      this.subscribeFunction = r;\n      return this;\n    }\n    error(e) {\n      this.errorFunction = e;\n      return this;\n    }\n    get(url) {\n      return this.request(url, \"GET\");\n    }\n    post(url, body) {\n      return this.request(url, \"POST\", body);\n    }\n    put(url, body) {\n      return this.request(url, \"PUT\", body);\n    }\n    delete(url) {\n      return this.request(url, \"DELETE\");\n    }\n    request(url, method, body) {\n      const headers = new HttpHeaders();\n      headers.append('Content-Type', 'application/json');\n      const finalUrl = `${this.baseUrl}/${url}`;\n      var request;\n      if (body) {\n        request = new HttpRequest(method, finalUrl, body, {\n          headers: headers,\n          responseType: 'json'\n        });\n      } else {\n        request = new HttpRequest(method, finalUrl, {\n          headers: headers\n        });\n      }\n      let serviceObject = this;\n      this.http.request(request).subscribe(res => {\n        if (serviceObject.subscribeFunction != null) {\n          serviceObject.subscribeFunction(res.body);\n        }\n      }, error => {\n        const statusCode = error.status;\n        const body = error.statusText;\n        const errorMessage = {\n          statusCode: statusCode,\n          error: body\n        };\n        console.log(errorMessage);\n        return Observable.throw(error);\n      });\n      return this;\n    }\n  }\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}